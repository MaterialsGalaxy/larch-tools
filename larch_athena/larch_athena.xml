<tool id="larch_athena" name="Larch Athena" version="@TOOL_VERSION@+galaxy@WRAPPER_VERSION@" python_template_version="3.5" profile="22.05" license="MIT">
    <description>generate Athena projects from XAFS data</description>
    <macros>
        <!-- version of underlying tool (PEP 440) -->
        <token name="@TOOL_VERSION@">0.9.66</token>
        <!-- version of this tool wrapper (integer) -->
        <token name="@WRAPPER_VERSION@">0</token>
        <!-- citation should be updated with every underlying tool version -->
        <!-- typical fields to update are version, month, year, and doi -->
        <token name="@TOOL_CITATION@">10.1088/1742-6596/430/1/012007</token>
        <xml name="format">
            <param name="format" type="select" display="radio" label="Input format" help="Whether data is in plaintext or already saved as an Athena project">
                <option value="plaintext" selected="true">Plaintext</option>
                <option value="athena">Athena project</option>
            </param> 
        </xml>
        <xml name="extract_group">
            <param name="extract_group" type="text" optional="true" label="Extract group" help="Which group to extract and process from the Athena project (will use first group in file if unset)"/>
        </xml>
    </macros>
    <creator>
        <person givenName="Patrick" familyName="Austin" url="https://github.com/patrick-austin" identifier="https://orcid.org/0000-0002-6279-7823"/>
    </creator>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">xraylarch</requirement>
        <!-- xraydb 4.5.0 is compatible with sqlalchemy 2, but is not yet available on condaforge so pin it -->
        <requirement type="package" version="4.4.7">xraydb</requirement>
        <requirement type="package" version="1.4.46">sqlalchemy</requirement>
        <requirement type="package" version="3.5.2">matplotlib</requirement>
        <requirement type="package" version="3.0">zip</requirement>
    </requirements>
    <required_files>
        <include type="literal" path="larch_athena.py"/>
    </required_files>
    <command detect_errors="exit_code"><![CDATA[
        mkdir prj edge flat derivative
        #if $merge_inputs.merge_inputs == "":
            #if $merge_inputs.format.dat_file.extension=="zip":
                && unzip '$merge_inputs.format.dat_file' -d dat_files
            #end if
            && python '${__tool_directory__}/larch_athena.py' '$merge_inputs.format.dat_file' '$merge_inputs.format.dat_file.extension' '$inputs'
        #else
            && python '${__tool_directory__}/larch_athena.py' '$merge_inputs.format.dat_file' 'None' '$inputs'
        #end if
        #if $zip_outputs:
            && zip out_zip.zip prj/* edge/* flat/* derivative/*
        #end if
    ]]></command>
    <configfiles>
        <inputs name="inputs"/>
    </configfiles>
    <inputs>
        <conditional name="merge_inputs" >
            <param name="merge_inputs" type="select" display="radio" label="Merge multiple inputs" help="Whether to merge all input data into one Athena project, by default each dataset or file in a zip will result in a separate output.">
                <option value="" selected="true">No</option>
                <option value="true">Yes</option>
            </param>
            <when value="">
                <conditional name="format" >
                    <expand macro="format"/>
                    <when value="plaintext">
                        <param name="dat_file" type="data" format="zip,h5,txt" label="XAFS data file" help="X-ray Absorption Fine Structure (XAFS) data, either in h5 or plaintext. Accepts individual file(s) or a zip."/>
                    </when>
                    <when value="athena">
                        <param name="dat_file" type="data" format="prj" label="Athena project" help="X-ray Absorption Spectroscopy (XAS) data, in Athena project format"/>
                        <expand macro="extract_group"/>
                    </when>
                </conditional>
            </when>
            <when value="true">
                <conditional name="format" >
                    <expand macro="format"/>
                    <when value="plaintext">
                        <param name="dat_file" type="data" format="zip,h5,txt" multiple="true" label="XAFS data file" help="X-ray Absorption Fine Structure (XAFS) data, either in h5 or plaintext, which will be merged. Accepts individual files or a zip."/>                    </when>
                    <when value="athena">
                        <param name="dat_file" type="data" format="prj" multiple="true" label="Athena project" help="X-ray Absorption Spectroscopy (XAS) data, which will be merged, in Athena project format"/>
                        <expand macro="extract_group"/>
                    </when>
                </conditional>
            </when>
        </conditional>
        <param name="annotation" type="text" label="Annotation" optional="true" help="If set, will annotate the output project(s) with this string. This will be used to generate legends when plotting data."/>
        <param name="energy_0" type="float" label="Edge energy (eV)" optional="true" help="If set, data will be calibrated so that the edge occurs at this energy (after merging, if relevant)."/>
        <param name="energy_min" type="float" label="Minimum energy (eV)" optional="true" help="If set, data will be cropped below this value in electron volts."/>
        <param name="energy_max" type="float" label="Maximum energy (eV)" optional="true" help="If set, data will be cropped above this value in electron volts."/>
        <param name="rebin" type="boolean" label="Re-bin data" help="Whether to re-bin along the energy axis to ensure appropriate levels of precision in the pre-edge, near-edge and extended region of the spectrum."/>
        <param name="plot_graph" type="boolean" label="Plot graph" help="Whether to plot the pre/post edge fitting and the normalised xÎ¼ data."/>
        <param name="zip_outputs" type="boolean" label="Zip outputs" help="Whether to zip all outputs into one dataset."/>
    </inputs>
    <outputs>
        <data name="out_zip" format="zip" from_work_dir="out_zip.zip" label="Zipped Athena project(s) ${annotation} ${on_string}">
            <filter>zip_outputs</filter>
        </data>
        <data name="athena_project_file" format="prj" from_work_dir="prj/out.prj" label="Athena project ${annotation} ${on_string}">
            <filter>not zip_outputs</filter>
            <filter>merge_inputs["merge_inputs"] or merge_inputs["format"]["dat_file"].extension != "zip"</filter>
        </data>
        <data name="edge_plot" format="png" from_work_dir="edge/out.png" label="Edge fitting ${annotation} ${on_string}">
            <filter>plot_graph</filter>
            <filter>not zip_outputs</filter>
            <filter>merge_inputs["merge_inputs"] or merge_inputs["format"]["dat_file"].extension != "zip"</filter>
        </data>
        <data name="flat_plot" format="png" from_work_dir="flat/out.png" label="Flattened plot ${annotation} ${on_string}">
            <filter>plot_graph</filter>
            <filter>not zip_outputs</filter>
            <filter>merge_inputs["merge_inputs"] or merge_inputs["format"]["dat_file"].extension != "zip"</filter>
        </data>
        <data name="derivative_plot" format="png" from_work_dir="derivative/out.png" label="Derivative plot ${annotation} ${on_string}">
            <filter>plot_graph</filter>
            <filter>not zip_outputs</filter>
            <filter>merge_inputs["merge_inputs"] or merge_inputs["format"]["dat_file"].extension != "zip"</filter>
        </data>
        <collection name="athena_project_file_collection" format="prj" type="list" label="Athena projects ${annotation} ${on_string}">
            <discover_datasets pattern="__name_and_ext__" directory="prj"/>
            <filter>not zip_outputs</filter>
            <filter>merge_inputs["merge_inputs"] == "" and merge_inputs["format"]["dat_file"].extension == "zip"</filter>
        </collection>
        <collection name="edge_plot_collection" format="png" type="list" label="Edge fittings ${annotation} ${on_string}">
            <discover_datasets pattern="__name_and_ext__" directory="edge"/>
            <filter>plot_graph</filter>
            <filter>not zip_outputs</filter>
            <filter>merge_inputs["merge_inputs"] == "" and merge_inputs["format"]["dat_file"].extension == "zip"</filter>
        </collection>
        <collection name="flat_plot_collection" format="png" type="list" label="Flattened plots ${annotation} ${on_string}">
            <discover_datasets pattern="__name_and_ext__" directory="flat"/>
            <filter>plot_graph</filter>
            <filter>not zip_outputs</filter>
            <filter>merge_inputs["merge_inputs"] == "" and merge_inputs["format"]["dat_file"].extension == "zip"</filter>
        </collection>
        <collection name="derivative_plot_collection" format="png" type="list" label="Derivative plots ${annotation} ${on_string}">
            <discover_datasets pattern="__name_and_ext__" directory="derivative"/>
            <filter>plot_graph</filter>
            <filter>not zip_outputs</filter>
            <filter>merge_inputs["merge_inputs"] == "" and merge_inputs["format"]["dat_file"].extension == "zip"</filter>
        </collection>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="dat_file" value="test.xmu"/>
            <output name="athena_project_file">
                <assert_contents>
                    <has_size value="5405" delta="10"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="4">
            <param name="dat_file" value="test.xmu"/>
            <param name="plot_graph" value="true"/>
            <output name="athena_project_file">
                <assert_contents>
                    <has_size value="5405" delta="10"/>
                </assert_contents>
            </output>
            <output name="edge_plot">
                <assert_contents>
                    <has_size value="54036" delta="20"/>
                </assert_contents>
            </output>
            <output name="flat_plot">
                <assert_contents>
                    <has_size value="39266" delta="20"/>
                </assert_contents>
            </output>
            <output name="derivative_plot">
                <assert_contents>
                    <has_size value="42435" delta="20"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="4">
            <param name="dat_file" value="test.zip"/>
            <param name="plot_graph" value="true"/>
            <output_collection name="athena_project_file_collection" type="list" count="2"/>
            <output_collection name="edge_plot_collection" type="list" count="2"/>
            <output_collection name="flat_plot_collection" type="list" count="2"/>
            <output_collection name="derivative_plot_collection" type="list" count="2"/>
        </test>
        <test expect_num_outputs="1">
            <param name="dat_file" value="h5.zip"/>
            <param name="plot_graph" value="true"/>
            <param name="zip_outputs" value="true"/>
            <output name="out_zip">
                <assert_contents>
                    <has_size value="155600" delta="100"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <param name="dat_file" value="test.xmu"/>
            <param name="energy_min" value="7000"/>
            <output name="athena_project_file">
                <assert_contents>
                    <has_size value="5300" delta="100"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="4">
            <param name="dat_file" value="test.xmu"/>
            <param name="energy_min" value="7000"/>
            <param name="energy_max" value="7100"/>
            <param name="plot_graph" value="true"/>
            <output name="athena_project_file">
                <assert_contents>
                    <has_size value="2350" delta="50"/>
                </assert_contents>
            </output>
            <output name="edge_plot">
                <assert_contents>
                    <has_size value="36640" delta="10"/>
                </assert_contents>
            </output>
            <output name="flat_plot">
                <assert_contents>
                    <has_size value="45060" delta="10"/>
                </assert_contents>
            </output>
            <output name="derivative_plot">
                <assert_contents>
                    <has_size value="40700" delta="10"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <param name="dat_file" value="test.xmu"/>
            <param name="energy_0" value="7050"/>
            <param name="energy_min" value="7000"/>
            <param name="energy_max" value="7100"/>
            <output name="athena_project_file">
                <assert_contents>
                    <has_size value="3082" delta="10"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <param name="dat_file" value="test.xmu"/>
            <param name="rebin" value="true"/>
            <output name="athena_project_file">
                <assert_contents>
                    <has_size value="8413" delta="10"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <param name="merge_inputs" value="true"/>
            <param name="dat_file" value="262875_PtSn_OCO_Abu_1.nxs,262876_PtSn_OCO_Abu_2.nxs"/>
            <output name="athena_project_file">
                <assert_contents>
                    <has_size value="37546" delta="10"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <param name="merge_inputs" value="true"/>
            <param name="dat_file" value="test.zip"/>
            <output name="athena_project_file">
                <assert_contents>
                    <has_size value="17989" delta="10"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <param name="format" value="athena"/>
            <param name="dat_file" value="test.prj"/>
            <output name="athena_project_file">
                <assert_contents>
                    <has_size value="5370" delta="10"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
        Using Larch, create an Athena project file from the input X-ray Absorption Fine Structure (XAFS) data file.
        
        Accepts both plaintext and HDF5 formatted data or a zip file containing these formats.
        If column names are not present in plaintext data, then the first column is treated as `energy` and the second as `mu`.
        Note that in order to ensure a consistent output, once unzipped all files will sorted first by their parent directories (alphabetically).
        Within a given directory, if all filenames contain digits then the last block of digits will be used to sort the files numerically.
        In the output, all files (regardless of initial filepath) are output in a flat hierarchy, with the number in which it was processed as the file name (zero-padded).
        Care should therefore be taken to ensure input data is consistent with this treatment.

        Optionally, plot the xÎ¼ data along with pre and post edge fitting lines for visual inspection. 
    ]]></help>
    <citations>
        <citation type="doi">@TOOL_CITATION@</citation>
        <citation type="doi">10.1107/S0909049505012719</citation>
    </citations>
</tool>